<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鱿鱼由于有雨忧郁</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.letzgo.ink/"/>
  <updated>2019-08-16T07:39:47.000Z</updated>
  <id>http://www.letzgo.ink/</id>
  
  <author>
    <name>wuShain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JSON Web Token 跨域认证解决方案</title>
    <link href="http://www.letzgo.ink/2017/JSON%20Web%20Token%20%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.letzgo.ink/2017/JSON Web Token 跨域认证解决方案/</id>
    <published>2017-09-15T06:01:37.000Z</published>
    <updated>2019-08-16T07:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。</p><p>JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息。</p><a id="more"></a><h2 id="传统的-session-认证"><a href="#传统的-session-认证" class="headerlink" title="传统的 session 认证"></a>传统的 session 认证</h2><ul><li><p>用户向服务器发送用户名和密码。</p></li><li><p>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></li></ul><h2 id="基于-session-认证的问题"><a href="#基于-session-认证的问题" class="headerlink" title="基于 session 认证的问题"></a>基于 session 认证的问题</h2><ul><li><p>内存开销，因为 session 保存在内存中，随着用户的增多，服务端的内存开销会增大。</p></li><li><p>session 数据的共享，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，如果是服务器集群，就要求 session 数据共享，每台服务器都能够读取 session。</p></li></ul><h2 id="JWT-原理（代码片段基于-nodejs）"><a href="#JWT-原理（代码片段基于-nodejs）" class="headerlink" title="JWT 原理（代码片段基于 nodejs）"></a>JWT 原理（代码片段基于 nodejs）</h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，就像下面这样。</p><pre><code class="json">{  &quot;用户id&quot;: &quot;1&quot;,  &quot;角色&quot;: &quot;管理员&quot;,  &quot;用户名&quot;: &quot;张三&quot;,  &quot;头像&quot;: &quot;pic.x.com/img/avatar.png&quot;}</code></pre><p>通过加密算法，生成 token 发送给用户。</p><pre><code class="js">const jwt = require(&#39;jsonwebtoken&#39;)const config = require(&#39;../config/default.js&#39;)// 创建token// 登录时：核对用户名和密码成功后，应用将用户的id 作为JWT Payload的一个属性module.exports = function(user) {  const token = jwt.sign(    {      userId: user.id,      userName: user.user_name,      avatar: user.avatar,      roles: user.roles    },    config.JW_SECRET,    {      // JW_SECRET  是校验码    解析时需要一致 才能取到 user 信息      expiresIn: &#39;7day&#39;    }  )  return token}</code></pre><p>客户端存储 token，并在每次请求时头部带上 token。</p><pre><code class="js">// request interceptorservice.interceptors.request.use(  config =&gt; {    // do something before request is sent    if (store.getters.token) {      // let each request carry token      // [&#39;Authorization&#39;] is a custom headers key      // please modify it according to the actual situation      config.headers[&#39;Authorization&#39;] = getToken()    }    return config  },  error =&gt; {    // do something with request error    console.error(error) // for debug    return Promise.reject(error)  })</code></pre><p>服务端验证 token，并返回数据。</p><pre><code class="js">const token = ctx.get(&#39;Authorization&#39;) || &#39;&#39; // request 带过来的 tokenif (token == &#39;&#39;) {  ctx.body = getErrorInfo(&#39;USER_NOT_LOGGED_IN&#39;)  return false}try {  const tokenContent = await jwt.verify(token, config.JW_SECRET) //如果token过期或验证失败，将抛出错误} catch (err) {  // TokenExpiredError   JsonWebTokenError  if (err.name === &#39;TokenExpiredError&#39;) {    ctx.body = getErrorInfo(&#39;USER_TOKEN_TIMEOUT&#39;)  } else {    ctx.body = getErrorInfo(&#39;USER_TOKEN_ERROR&#39;)  }  return false}await next()</code></pre><p>这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持 CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了 <strong> Access-Control-Allow-Origin: * </strong>。</p><p>所以 ，jwt 的流程是这样的。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/JSON%20Web%20Token%20%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/jwtline.png" alt></p><h2 id="JWT-的数据结构"><a href="#JWT-的数据结构" class="headerlink" title="JWT 的数据结构"></a>JWT 的数据结构</h2><p>JWT 大概长这样。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/JSON%20Web%20Token%20%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/jwt.png" alt></p><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><p>第一部分我们称它为头部（header)。</p><p>第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)。</p><p>第三部分是签证（signature)。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/JSON%20Web%20Token%20%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/jwt_form.jpg" alt></p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><pre><code class="js">{  &quot;alg&quot;: &quot;HS256&quot;,  &quot;typ&quot;: &quot;JWT&quot;}</code></pre><p>上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p><pre><code>iss (issuer)：签发人exp (expiration time)：过期时间sub (subject)：主题aud (audience)：受众nbf (Not Before)：生效时间iat (Issued At)：签发时间jti (JWT ID)：编号</code></pre><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><pre><code>{  &quot;sub&quot;: &quot;1234567890&quot;,  &quot;name&quot;: &quot;John Doe&quot;,  &quot;admin&quot;: true}</code></pre><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>jwt 的第三部分是一个签证信息，这个签证信息由三部分组成：base64 后的 header,base64 后的 payload,secret 密钥。</p><p>密钥（secret）只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><pre><code>HMACSHA256(  base64UrlEncode(header) + &quot;.&quot; +  base64UrlEncode(payload),  secret)</code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><p>注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。</p><h2 id="JWT-的特点"><a href="#JWT-的特点" class="headerlink" title="JWT 的特点"></a>JWT 的特点</h2><ul><li><p>因为 json 的通用性，所以 JWT 是可以进行跨语言、跨平台的。</p></li><li><p>便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的，多端共用非常方便。</p></li><li><p>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p></li><li><p>JWT 容易被盗用，为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p></li><li><p>不需要在服务端保存会话信息，减小服务器内存开销。</p></li><li><p>保存好 secret 私钥非常重要。</p></li><li><p>如果可以，请使用 https 协议。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。&lt;/p&gt;
&lt;p&gt;JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://www.letzgo.ink/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://www.letzgo.ink/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>用 HEXO 快速搭建个人博客</title>
    <link href="http://www.letzgo.ink/2015/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.letzgo.ink/2015/HEXO搭建个人博客/</id>
    <published>2015-09-15T06:36:47.000Z</published>
    <updated>2019-08-16T07:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一款基于 Node.js 的静态博客框架，可以通过只编写 markdown 的方式生成静态网页代码托管在 GitHub 和 Heroku 上，甚至你不需要去申请域名和空间，非常的轻量和便捷。如果想要更加全面的了解 Hexo，可以到其官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节。</p><a id="more"></a><h2 id="github-创建-repository"><a href="#github-创建-repository" class="headerlink" title="github 创建 repository"></a>github 创建 repository</h2><p>在你的 github 中新建一个名为 username.github.io 的项目。</p><p>要注意 <strong> 你的项目名必须和你的用户名相同。</strong>，比如我的 github 用户名是 zx1988826，那么我要新建的项目名为 zx1988826.github.io。</p><p>完成后你就可以通过 <strong>username.github.io</strong> 这个二级域名来访问你的博客。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/WX20190816-153007.png" alt></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>使用 npm 命令全局安装 hexo，输入：</p><pre><code class="bash">npm install -g hexo</code></pre><p>安装完成后，初始化一个博客项目，输入：</p><pre><code class="bash">hexo init blog</code></pre><p>进入 blog 新建一篇文章</p><pre><code class="bash">cd blog# 新建文章hexo new test_my_site# 打包生成静态文件hexo g# 启动本地服务器预览hexo server</code></pre><p>完成后，打开浏览器输入地址：<strong>localhost:4000</strong></p><p>现在来介绍常用的 Hexo 命令。</p><pre><code class="bash">npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客命令简写hexo new &quot;blog&quot; #新建文章hexo generate #生成 可以简写为 hexo ghexo server #启动服务预览 可以简写为 hexo shexo deploy #部署 可以简写为 hexo dhexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></pre><h2 id="推送到-github"><a href="#推送到-github" class="headerlink" title="推送到 github"></a>推送到 github</h2><p>本地写完文章后，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。</p><p>在推送之前，我们修改项目中的 _config.yml 配置文件，将 deploy:</p><pre><code>deploy:  type: git  repo: 这里填入你之前在GitHub上创建仓库的完整路径  branch: master</code></pre><pre><code class="BASH">npm install hexo-deployer-git --save</code></pre><p>这时候找到根目录下_config.yml 配置文件,将 repository 的路径引导到你的 github 的博客路径上。</p><pre><code class="BASH">deploy:    type: git    repository: https://github.com/xxxxx/xxxxx.github.io.git    branch: master</code></pre><p>配置完之后，需要安装一个用于 Git 部署的插件,可以加上淘宝镜像速度快一点。</p><pre><code class="bash">npm install hexo-deployer-git --save --registry=https://registry.npm.taobao.org</code></pre><p>一切大功告成，这时候可以开始执行命令推送了。</p><pre><code class="bash">hexo clean # 清空静态文件hexo g # 生成新的静态文件hexo d # 推送至远程</code></pre><p>推送成功后，你就可以打开 <a href="https://github.com/xxxxx/xxxxx.github.io.git" target="_blank" rel="noopener">https://github.com/xxxxx/xxxxx.github.io.git</a> 看到你的博客了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><blockquote><p>使用 GitHub 托管网站的个人域名，不需要备案，因为 github 服务器在美国。</p></blockquote><p>如果你不想花钱购买个人域名，使用 github 提供的子域名也是不错的。就是网址不那么好看。</p><p>你也可以通过自己购买的域名去访问博客，这样的话需要将域名解析配置一下。这里我演示一下阿里云的域名配置，登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析配置。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/WX20190816-153514.png" alt></p><p>包括添加三条解析记录，192.30.252.153 是 GitHub 的地址，你也可以 ping 你的 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的 ip 地址，填入进去。</p><p>第二步，登录 GitHub，进入之前创建的仓库，点击 settings，设置 Custom domain，输入你的域名。</p><p>这里注意一下，在每次推送完文章之后，需要 在项目的 setting 中的 Custom domain 重新设置你的域名。 因为每次推送完之后这里都会被清空一次。</p><p><img src="https://wushain-blog.oss-cn-shanghai.aliyuncs.com/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/WX20190816-153636.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一款基于 Node.js 的静态博客框架，可以通过只编写 markdown 的方式生成静态网页代码托管在 GitHub 和 Heroku 上，甚至你不需要去申请域名和空间，非常的轻量和便捷。如果想要更加全面的了解 Hexo，可以到其官网 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 了解更多的细节。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
